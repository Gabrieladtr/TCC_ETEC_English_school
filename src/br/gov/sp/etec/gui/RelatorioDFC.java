/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.gov.sp.etec.gui;

import br.gov.sp.etec.dao.UtilDAO;
import br.gov.sp.etec.model.DFC;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Edson
 */
public class RelatorioDFC extends javax.swing.JFrame implements java.awt.print.Printable {

    double ead, avulso, mensal;
    double aluguel, internet, agua, luz, telefone;
    double eadA, avulsoA, mensalA;
    double aluguelA, internetA, aguaA, luzA, telefoneA, adiantaA;
    double maquinas, moveis, material;
    double capital, adianta, inicio, finaly;
    double patrimonio_liquidoAnterior, patrimonio_liquido;
    int id_cap;
    Date data = new Date();
    Date data2 = new Date();
    Calendar c1 = Calendar.getInstance();
    Calendar c2 = Calendar.getInstance();
    String dataFormatada = "";
    String dataFormatada2 = "";
    
    
    

    /**
     * Creates new form RelatorioDFC
     */
    public RelatorioDFC() {

        initComponents();
       
        datas();
        listaEAD();
        listaMensal();
        listaAvulso();
        listaAluguel();
        listaLuz();
        listaAgua();
        listaTelefone();
        listaInternet();
        listaEADAnterior();
        listaMensalAnterior();
        listaAvulsoAnterior();
        listaAluguelAnterior();
        listaLuzAnterior();
        listaAguaAnterior();
        listaTelefoneAnterior();
        listaInternetAnterior();
        listaEquipamentos();
        listaMoveis();
        listaMaterial();
        listaIdCapital();
        listaCapital();
        listaAdiantamentos();
        diferencaCaixa();
       

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        RelatorioDFC = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelEAD = new javax.swing.JLabel();
        jLabelMensal = new javax.swing.JLabel();
        jLabelAvulso = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelSomaClientes = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Internet = new javax.swing.JLabel();
        Telefone = new javax.swing.JLabel();
        Aluguel = new javax.swing.JLabel();
        Agua = new javax.swing.JLabel();
        Luz = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jLabelPLAO = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabelMaquinas = new javax.swing.JLabel();
        jLabelMoveisU = new javax.swing.JLabel();
        jLabelMaterial = new javax.swing.JLabel();
        jLabelCLAI = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jLabelEAD2 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabelData1 = new javax.swing.JLabel();
        jLabelData2 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabelAdianta = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DFC");
        setMinimumSize(new java.awt.Dimension(625, 660));
        setPreferredSize(new java.awt.Dimension(600, 750));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(610, 810));

        jPanel1.setPreferredSize(new java.awt.Dimension(706, 700));

        RelatorioDFC.setMaximumSize(new java.awt.Dimension(615, 750));
        RelatorioDFC.setMinimumSize(new java.awt.Dimension(615, 750));
        RelatorioDFC.setOpaque(false);
        RelatorioDFC.setPreferredSize(new java.awt.Dimension(706, 856));
        RelatorioDFC.setRequestFocusEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Atividades operacionais");

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("EAD..................................................................................................................................................................");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Mensal.............................................................................................................................................................");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Avulso..............................................................................................................................................................");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Soma Total");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Pagamento custo");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Internet...........................................................................................................................................................");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Telefone........................................................................................................................................................");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Aluguel...........................................................................................................................................................");

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Água................................................................................................................................................................");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Luz...................................................................................................................................................................");

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel13.setText("Patrimônio Líquido de atividades operacionais ");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Campos de Imobilizados a vista");

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Máquinas e equipamentos");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("Atividade de Investimento");

        jLabel18.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel18.setText("Móveis e Utensilios");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Estoque");

        jLabel20.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel20.setText("Material de consumo");

        jLabel21.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel21.setText("Caixa Líquido de atidades de investimentos");

        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));

        jLabel14.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel14.setText("Relatório mensal");

        jLabel22.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel22.setText("...................................................................................................................................................");

        jLabel23.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel23.setText(".....................................................................................................................");

        jLabel24.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel24.setText("...................................................................................................................................");

        jLabel25.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel25.setText("................................................................................................................................");

        jLabel26.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel26.setText("........................................................................................");

        jLabel27.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel27.setText("................................................................................");

        jLabel39.setText("Início:");

        jLabel40.setText("Final:");

        jLabel42.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel42.setText("Adiantamento de lucros");

        jLabel43.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel43.setText(".......................................................................................................................");

        javax.swing.GroupLayout RelatorioDFCLayout = new javax.swing.GroupLayout(RelatorioDFC);
        RelatorioDFC.setLayout(RelatorioDFCLayout);
        RelatorioDFCLayout.setHorizontalGroup(
            RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addGroup(RelatorioDFCLayout.createSequentialGroup()
                            .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RelatorioDFCLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel43)))
                            .addGap(13, 13, 13)
                            .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(Luz, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                .addComponent(Agua, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelAdianta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                                .addGap(491, 491, 491)
                                                .addComponent(jLabelEAD, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel19)
                                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabelPLAO, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                        .addGap(516, 516, 516)
                                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Internet, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Aluguel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel24))
                                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                                .addComponent(jLabel20)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                                .addComponent(jLabel21)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(10, 10, 10)
                                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabelCLAI, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                            .addComponent(jLabelMaterial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabelMoveisU, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RelatorioDFCLayout.createSequentialGroup()
                                            .addComponent(jLabel17)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabelMaquinas, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                        .addComponent(jLabel39)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabelData1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                        .addComponent(jLabel40)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabelData2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(43, 43, 43)))
                        .addContainerGap())
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelMensal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                    .addComponent(jLabelAvulso, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelEAD2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(RelatorioDFCLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelSomaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        RelatorioDFCLayout.setVerticalGroup(
            RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RelatorioDFCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelData1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RelatorioDFCLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelData2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel40))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelEAD2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelMensal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelAvulso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22))
                    .addComponent(jLabelSomaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10))
                    .addGroup(RelatorioDFCLayout.createSequentialGroup()
                        .addComponent(Internet, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(Telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Aluguel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(Agua, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Luz, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelAdianta, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel42)
                        .addComponent(jLabel43)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel27))
                    .addComponent(jLabelPLAO, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17)
                        .addComponent(jLabel23))
                    .addComponent(jLabelMaquinas, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(jLabel24))
                    .addComponent(jLabelMoveisU, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel20)
                        .addComponent(jLabel25))
                    .addComponent(jLabelMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RelatorioDFCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel26))
                    .addComponent(jLabelCLAI, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelEAD, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(RelatorioDFC, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RelatorioDFC, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        jMenu1.setText("Opções");

        jMenuItem1.setText("Imprimir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        printComponenet();;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void datas() {
        DFC dfc = new DFC();
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        dataFormatada = formatter.format(c1.getTime());
        dataFormatada2 = formatter.format(c2.getTime());
        jLabelData1.setText(dataFormatada);
        jLabelData2.setText(dataFormatada2);

    }
    
    
    
    public void printComponenet() {
        PrinterJob pj = PrinterJob.getPrinterJob();
        pj.setJobName("RelatorioDFC");
        pj.setPrintable(new Printable() {
            public int print(Graphics pg, PageFormat pf, int pageNum) {
                if (pageNum > 0) {
                    return Printable.NO_SUCH_PAGE;
                }
                Graphics2D g2 = (Graphics2D) pg;
                g2.translate(pf.getImageableX(), pf.getImageableY());
                RelatorioDFC.paint(g2);        // o JPanel aqui
                return Printable.PAGE_EXISTS;
            }
        });
        if (pj.printDialog() == false) {
            return;
        }
        try {
            pj.print();
        } catch (PrinterException ex) {
            // handle exception
        }
    }
    
    public void toPDF(){
     int largura = jPanel1.getWidth();
int altura = jPanel1.getHeight();
BufferedImage imgPanel = new BufferedImage(largura, altura, BufferedImage.TYPE_INT_RGB);
Graphics2D img = imgPanel.createGraphics();
jPanel1.printAll(img);
    }
    

    public void listaEAD() {
       
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        
        String sql;
        DFC dfc = new DFC();
        sql = "select sum(valor) as somaEAD from ativo where ativo.subcategoria= 'EAD' and ativo.data_lancamento between ? and ? ;";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            //ResultSet rs = ps.executeQuery();
            stm = con.prepareStatement(sql);
            stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                ead = rs.getDouble("somaEAD");
                jLabelEAD2.setText("R$" + String.valueOf(rs.getDouble("somaEAD")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    public void listaMensal() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaMensal from ativo where ativo.subcategoria = 'Mensal' and ativo.data_lancamento between ? and ? ;";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
            stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                mensal = rs.getDouble("somaMensal");
                jLabelMensal.setText("R$" + String.valueOf(rs.getDouble("somaMensal")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaAvulso() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAvulso from ativo where ativo.subcategoria = 'Avulso' and ativo.data_lancamento between ? and ? ;";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                avulso = rs.getDouble("somaAvulso");
                jLabelAvulso.setText("R$" + String.valueOf(rs.getDouble("somaAvulso")));
            }
            double somaTotal = ead + mensal + avulso;
            jLabelSomaClientes.setText("R$" + String.valueOf(somaTotal));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaAluguel() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAluguel from passivo where passivo.subcategoria = 'Aluguel' and passivo.data_lancamento between ? and ? ";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                aluguel = rs.getDouble("somaAluguel");
                Aluguel.setText("R$" + String.valueOf(rs.getDouble("somaAluguel")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaLuz() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaLuz from passivo where passivo.subcategoria = 'Luz' and passivo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                luz = rs.getDouble("somaLuz");
                Luz.setText("R$" + String.valueOf(rs.getDouble("somaLuz")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaAgua() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAgua from passivo where passivo.subcategoria = 'Água' and passivo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                agua = rs.getDouble("somaAgua");
                Agua.setText("R$" + String.valueOf(rs.getDouble("somaAgua")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaTelefone() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaTelefone from passivo where passivo.subcategoria = 'Telefone' and passivo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                telefone = rs.getDouble("somaTelefone");
                Telefone.setText("R$" + String.valueOf(rs.getDouble("somaTelefone")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
     public void listaAdiantamentos() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAdianta from ativo where ativo.subcategoria = 'Adiantamento de lucros' and ativo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                adianta = rs.getDouble("somaAdianta");
                jLabelAdianta.setText("R$" + String.valueOf(rs.getDouble("somaAdianta")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaInternet() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaInternet from passivo where passivo.subcategoria = 'Internet' and passivo.data_lancamento between ? and ? ";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                internet = rs.getDouble("somaInternet");
                Internet.setText("R$" + String.valueOf(rs.getDouble("somaInternet")));
            }

            double somaTotal = ead + mensal + avulso;
            double somaTotal2 = aluguel + internet + luz + agua + telefone+ adianta;
            patrimonio_liquido = (somaTotal - somaTotal2);
            jLabelPLAO.setText("R$" + String.valueOf(patrimonio_liquido));
           
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    

    public void listaEADAnterior() {
       
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        
        String sql;
        DFC dfc = new DFC();
        sql = "select sum(valor) as somaEAD from ativo where ativo.subcategoria= 'EAD' and ativo.data_lancamento between ? and ? ;";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            //ResultSet rs = ps.executeQuery();
            stm = con.prepareStatement(sql);
            stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                eadA = rs.getDouble("somaEAD");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    public void listaMensalAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaMensal from ativo where ativo.subcategoria = 'Mensal' and ativo.data_lancamento between ? and ? ;";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
            stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                mensalA = rs.getDouble("somaMensal");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaAvulsoAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAvulso from ativo where ativo.subcategoria = 'Avulso' and ativo.data_lancamento between ? and ? ;";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                avulsoA = rs.getDouble("somaAvulso");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaAluguelAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAluguel from passivo where passivo.subcategoria = 'Aluguel' and passivo.data_lancamento between ? and ? ";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                aluguelA = rs.getDouble("somaAluguel");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaLuzAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaLuz from passivo where passivo.subcategoria = 'Luz' and passivo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                luzA = rs.getDouble("somaLuz");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaAguaAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAgua from passivo where passivo.subcategoria = 'Água' and passivo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                aguaA = rs.getDouble("somaAgua");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaTelefoneAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaTelefone from passivo where passivo.subcategoria = 'Telefone' and passivo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                telefoneA = rs.getDouble("somaTelefone");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
     public void listaAdiantamentosAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaAdianta from ativo where ativo.subcategoria = 'Adiantamento de lucros' and ativo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                adiantaA = rs.getDouble("somaAdianta");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaInternetAnterior() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, -1);
        c2.add(Calendar.MONTH, -1);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaInternet from passivo where passivo.subcategoria = 'Internet' and passivo.data_lancamento between ? and ? ";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                internetA = rs.getDouble("somaInternet");
            }

            double somaTotalAnterior1 = eadA + mensalA + avulsoA;
            double somaTotalAnterior2 = aluguelA + internetA + luzA + aguaA + telefoneA+ adiantaA;
             patrimonio_liquidoAnterior = (somaTotalAnterior1 - somaTotalAnterior2);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
   

    public void listaEquipamentos() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaEquip from ativo where ativo.subcategoria = 'Máquinas e equipamentos' and ativo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                maquinas = rs.getDouble("somaEquip");
                jLabelMaquinas.setText("R$" + String.valueOf(rs.getDouble("somaEquip")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaMoveis() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaMoveis from ativo where ativo.subcategoria = 'Móveis e utensílios' and ativo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                moveis = rs.getDouble("somaMoveis");
                jLabelMoveisU.setText("R$" + String.valueOf(rs.getDouble("somaMoveis")));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void listaMaterial() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select sum(valor) as somaMaterial from ativo where ativo.subcategoria = 'Material de consumo' and ativo.data_lancamento between ? and ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                material = rs.getDouble("somaMaterial");
                jLabelMaterial.setText("R$" + String.valueOf(rs.getDouble("somaMaterial")));
            }

            double CLAI = material + moveis + maquinas;
            jLabelCLAI.setText("R$" + String.valueOf(CLAI));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    public void listaIdCapital() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "SELECT max(passivo.id_passivo) as id\n" +
"FROM   passivo\n" +
"WHERE  passivo.subcategoria = 'Capital Social' and passivo.data_lancamento between ? and ?;";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
              stm.setString(1, dataFormatada3);
            stm.setString(2, dataFormatada4);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                id_cap = rs.getInt("id");
               
            }

            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    public void listaCapital() {
        c1.setTime(data);
        c2.setTime(data2);
        c1.add(Calendar.MONTH, 0);
        c2.add(Calendar.MONTH, 0);
        c1.set(Calendar.DAY_OF_MONTH, c1.getActualMinimum(Calendar.DAY_OF_MONTH));
        c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
        DateFormat formatter2 = new SimpleDateFormat("yyyy/MM/dd");
        String dataFormatada3 = formatter2.format(c1.getTime());
        String dataFormatada4 = formatter2.format(c2.getTime());
        String sql;
        sql = "select passivo.valor as valor FROM   passivo WHERE  passivo.id_passivo = ?";
        try {
            Connection con = null;
            con = UtilDAO.conectar();
            PreparedStatement stm = null;
            stm = con.prepareStatement(sql);
            stm.setInt(1, id_cap);
            ResultSet rs = stm.executeQuery();

            while (rs.next()) {
                capital = rs.getDouble("valor");
               
            }

            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    public void diferencaCaixa(){
       double diferenca = patrimonio_liquido - patrimonio_liquidoAnterior ;
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatorioDFC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatorioDFC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatorioDFC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatorioDFC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelatorioDFC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Agua;
    private javax.swing.JLabel Aluguel;
    private javax.swing.JLabel Internet;
    private javax.swing.JLabel Luz;
    private javax.swing.JPanel RelatorioDFC;
    private javax.swing.JLabel Telefone;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAdianta;
    private javax.swing.JLabel jLabelAvulso;
    private javax.swing.JLabel jLabelCLAI;
    private javax.swing.JLabel jLabelData1;
    private javax.swing.JLabel jLabelData2;
    private javax.swing.JLabel jLabelEAD;
    private javax.swing.JLabel jLabelEAD2;
    private javax.swing.JLabel jLabelMaquinas;
    private javax.swing.JLabel jLabelMaterial;
    private javax.swing.JLabel jLabelMensal;
    private javax.swing.JLabel jLabelMoveisU;
    private javax.swing.JLabel jLabelPLAO;
    private javax.swing.JLabel jLabelSomaClientes;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables

    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
